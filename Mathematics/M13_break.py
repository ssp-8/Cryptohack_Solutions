from random import randint
import socket,json
from Cryptodome.Util.number import *
from math import isqrt

FLAG = b"crypto{???????????????????????????????????}"
# N is a product of safe primes
n =   56135841374488684373258694423292882709478511628224823806418810596720294684253418942704418179091997825551647866062286502441190115027708222460662070779175994701788428003909010382045613207284532791741873673703066633119446610400693458529100429608337219231960657953091738271259191554117313396642763210860060639141073846574854063639566514714132858435468712515314075072939175199679898398182825994936320483610198366472677612791756619011108922142762239138617449089169337289850195216113264566855267751924532728815955224322883877527042705441652709430700299472818705784229370198468215837020914928178388248878021890768324401897370624585349884198333555859109919450686780542004499282760223378846810870449633398616669951505955844529109916358388422428604135236531474213891506793466625402941248015834590154103947822771207939622459156386080305634677080506350249632630514863938445888806223951124355094468682539815309458151531117637927820629042605402188751144912274644498695897277
phi = 56135841374488684373258694423292882709478511628224823806413974550086974518248002462797814062141189227167574137989180030483816863197632033192968896065500768938801786598807509315219962138010136188406833851300860971268861927441791178122071599752664078796430411769850033154303492519678490546174370674967628006608839214466433919286766123091889446305984360469651656535210598491300297553925477655348454404698555949086705347702081589881912691966015661120478477658546912972227759596328813124229023736041312940514530600515818452405627696302497023443025538858283667214796256764291946208723335591637425256171690058543567732003198060253836008672492455078544449442472712365127628629283773126365094146350156810594082935996208856669620333251443999075757034938614748482073575647862178964169142739719302502938881912008485968506720505975584527371889195388169228947911184166286132699532715673539451471005969465570624431658644322366653686517908000327238974943675848531974674382848
g = 986762276114520220801525811758560961667498483061127810099097

def connect():
    flag=""
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect(("socket.cryptohack.org",13398))
    recv = ""
    while True:
        data = s.recv(4096)
        if not data:
            break
        recv+=data.decode()
        print(recv)
        if "complicated math?" in recv:
            break
    for _ in range(57,8*len(FLAG)):
        print(_)
        to_send = {
            "option":"get_bit",
            "i":_
        }
        s.sendall(json.dumps(to_send).encode())
        recv = ""
        while True:
            data = s.recv(4096)
            if not data:
                break
            recv+=data.decode()
            if "}" in recv:
                break
        # print(recv)
        bit = json.loads(recv)
        # print(int(bit["bit"],16))
        print(pow(int(bit["bit"],16),phi,n))
        if pow(int(bit["bit"],16),phi,n) != 1:
            flag+="0"
        else:
            count = 0
            while count != 3:
                to_send = {
                "option":"get_bit",
                "i":_
                }
                s.sendall(json.dumps(to_send).encode())
                recv = ""
                while True:
                    data = s.recv(4096)
                    if not data:
                        break
                    recv+=data.decode()
                    if "}" in recv:
                        break
                # print(recv)
                bit = json.loads(recv)
                if(pow(int(bit["bit"],16),phi,n)) != 1:
                    flag+="0"
                    count = 0
                    break
                else:
                    count+=1
            if count == 3:
                flag+="1"
        print(flag)
        
    print(long_to_bytes(int(flag,2)).decode(errors='ignore'))



# connect()
a = 1
b = - (n+1-phi)
c = n
# print(isqrt(pow(b,2)-4*a*c))
print(n-1 - phi)
# print(pow(g,phi,n))